#!/bin/bash
#script that makes it easier to use WireGuard with Mullvad
RED='\033[1;31m'   # Red color
GREEN='\033[0;32m' # Green color"
NC='\033[0m'       # No Color

#Error function
error() {
	echo -e "${RED}Error: $1${NC}" >&2
	exit 1
}

startup() {
	local CURR_STARTUP TARGET CONFIG
	CONFIG=$1                                             # On or off
	TARGET=$2                                             # Target autostart, if any.
	CURR_STARTUP=$(cat $HOME/.config/mullvad/start-up.txt 2>/dev/null) #get current autostart
	if [[ $CONFIG == "on" ]]; then
		#Can't have multiple
		[[ -z "$CURR_STARTUP" ]] || error "Start up server already set to $CURR_STARTUP."
		sudo systemctl enable wg-quick@mullvad-"$TARGET" &>/dev/null
		echo $TARGET > $HOME/.config/mullvad/start-up.txt
	elif [[ $CONFIG == "off" ]]; then
		[[ $CURR_STARTUP ]] || error "No autostart is active."
		sudo systemctl disable wg-quick@"$CURR_CONNECTION" &>/dev/null
		echo "" > $HOME/.config/mullvad/start-up.txt
	elif [[ $CONFIG == "show" ]]; then
		echo -e "${GREEN}Current start-up is set to: $CURR_STARTUP${NC}"
		exit 0
	else
		error "Bad input."
	fi
	echo -e "${GREEN}Done! Changes will apply on next reboot.${NC}"
}

verify_connection() {
	echo -e "# Verifying connection #"
	TARGET=$(curl -s https://am.i.mullvad.net/json | jq -r .mullvad_exit_ip_hostname)
	[[ "${TARGET//-*/}" == "${CURR_CONNECTION//*-/}" ]] || error "NOT able to verify!"
	echo -e "${GREEN}Connection verified!${NC}"
}

update_default() {
	local ANS
	echo -n "Please select the name of your default server (e.g. se1): "

	while :; do
		read ANS
		[[ ! $ANS =~ ^$ ]] && break
		echo -en "\nInvalid input, please try again: "
	done

	echo $ANS >$HOME/.config/mullvad/default.txt
	DEFAULT=$ANS
	echo -e "${GREEN}Default set to $ANS!${NC}"
}

server_change() {
	local ANS
	echo -e "${RED}Error: you're currently connected to ${CURR_CONNECTION//*-/}.${NC}"
	echo -n "Do you wish to change to ${SERVER//*-/}? [Y/n] "

	while :; do
		read ANS
		[[ $ANS =~ ^(y|Y|^$)$ ]] && $0 disconnect &>/dev/null && break
		[[ $ANS =~ ^(n|N)$ ]] && error "aborted."
		echo -n "Invalid input, please try again [Y/n] "
	done
	echo -e "# Reconnecting #"
}

kill_switch_verify() {
	local ANS
	sleep 1
	echo -n "You are trying to change the kill-switch value of a server you're currently connected to. "
	echo "This requires disconnecting from the server before proceeding."
	echo
	echo -n "Do you wish to continue? [Y/n] "

	while :; do
		read ANS
		[[ $ANS =~ ^(y|Y|^$)$ ]] && KS_YES=true && break
		[[ $ANS =~ ^(n|N)$ ]] && break
		echo -n "Invalid input, please try again [Y/n] "
	done
}

kill_switch() {
	local PostUp PreDown
	echo -e "# Turning $1 kill-switch #"

	PostUp="iptables -I OUTPUT ! -o %i -m mark ! --mark \$(wg show %i fwmark) -m addrtype ! --dst-type LOCAL -j REJECT"
	PostUp=${PostUp/*/"PostUp = $PostUp && ${PostUp//ip/ip6}"}
	PreDown=${PostUp//-I/-D}
	PreDown=${PreDown//PostUp/PreDown}

	servers=$(awk -F'[:]' '{print $1" "}' $HOME/.config/mullvad/*servers.txt 2>/dev/null)
	#Resets the argument "$all" to all the servers
	[[ $2 == all ]] && set "$1" "$servers"

	for ARG in ${*:2}; do
		#Check if valid syntax
		[[ ! $ARG =~ ^([a-z]{2}[0-9]{1,2})$ ]] && echo -e "${RED}Error: invalid input $ARG.${NC}" && continue

		#Security check, see kill_switch_verify function above
		if [[ "${CURR_CONNECTION//*-/}" == "$ARG" ]]; then
			kill_switch_verify
			[[ $KS_YES ]] || continue
			"$0" disconnect &>/dev/null
		fi

		if grep -q "$ARG" <<<"$servers"; then
			#always remove the kill-switch
			sourceFile="/etc/wireguard/mullvad-$ARG.conf"
			umask 077
			sudo awk '!/REJECT/' "$sourceFile" 1>"/tmp/$ARG.tmp"
			sudo mv "/tmp/$ARG.tmp" "$sourceFile"
			sudo chown root: "$sourceFile"

			#If cmd happens to be "on", just add the kill-switch back
			[[ "$1" == "on" ]] && sudo sed -i "4a $PostUp\n$PreDown" "$sourceFile"
		else
			echo -e "${RED}Error: $ARG is not a valid server.${NC}"
		fi
	done

	[[ ! $KS_YES ]] && echo -e "${GREEN}Done.${NC}" && exit 1
	#Enables and verifies connection again (optional), see above
	echo "# Reconnecting #"
	"$0" connect "${CURR_CONNECTION//*-/}" &>/dev/null && "$0" verify
}

#The syntax ${2:-DEFAULT} expands to default server if $2 is unset or is set to the empty string.
CMD=$1
DEFAULT=$(cat $HOME/.config/mullvad/default.txt 2>/dev/null)
[[ -z "$DEFAULT" ]] && echo -e "${RED}Error: Default server needs to be set.${NC}" && update_default
SERVER=mullvad-${2:-$DEFAULT}
CURR_CONNECTION=$(wg show interfaces)
case $CMD in
connect)
	echo -e "# Connecting to ${SERVER//*-/} #"
	#Check is already connecteed
	[[ $CURR_CONNECTION != $SERVER ]] || error "already connected to ${SERVER//*-/}."

	#If above try, ask if change
	[[ ! $CURR_CONNECTION ]] || server_change

	#Try to connect to chosen server, else throw error.
	sudo wg-quick up "$SERVER" &>/dev/null || error "server does not exist, disconnecting."

	echo -e "${GREEN}Connected!${NC}"
	CURR_CONNECTION=$SERVER
	verify_connection
	;;

disconnect)
	echo -e "# Disconnecting VPN #"
	sudo wg-quick down "$CURR_CONNECTION" &>/dev/null || error "not connected."
	echo -e "${GREEN}Disconnected${NC}"
	;;

kill-switch)
	SERVER=${3:-$DEFAULT}
	[[ $2 =~ on|off ]] || error "Invalid choice, aborting."
	kill_switch "$2" "$SERVER"
	;;

list | ls | l)
	echo "Available servers"
	echo "-----------------------"
	echo -e "$(cat $HOME/.config/mullvad/*servers.txt)" || error "no server list found. Try updating."
	;;

start-up)
	SERVER=${3:-$DEFAULT}
	[[ $(grep "$SERVER" $HOME/.config/mullvad/*servers.txt) ]] || error "Invalid server, aborting."
	startup "$2" "$SERVER"
	;;	

status)
	[[ $CURR_CONNECTION ]] || error "not connected."
	sudo wg
	;;

update)
	#If want to update default, do it.
	if [[ $2 == "default" ]]; then
		update_default
		exit 1

		#Else if want to update the whole list
	elif [[ $2 == "servers" ]]; then

		echo -e "# Fetching server list #"
		curl -sLO https://mullvad.net/media/files/mullvad-wg.sh
		chmod +x ./mullvad-wg.sh

		#Reads the output when running mullvad config file
		while read -r line; do
			[[ $line =~ ^[^\[]+:$ ]] && REGIONS+=("${line:2:-1}")
			[[ $line =~ wg-quick ]] && CODES+=("${line/*mullvad-/}")
		done <<<"$(. mullvad-wg.sh)"

		#Stores each code and region in an array, then sorts it alphabetically after code
		for i in ${!CODES[*]}; do
			ALL_SERVERS+=("${CODES[$i]}:  ${REGIONS[$i]}")
		done
		IFS=$'\n' ALL_SERVERS=($(sort <<<"${ALL_SERVERS[*]}"))

		#Writes the list to a text file and stores it, also takes care of the umlaut in "Malmö"
		umask 077
		printf '%s\n' "${ALL_SERVERS[@]}" | sed -e 's/&ouml;/ö/g' >/tmp/mullvad_servers.txt
		mv /tmp/mullvad_servers.txt $HOME/.config/mullvad/
		rm ./mullvad-wg.sh
		"$0" list
	else
		error "unknown command, use '$(basename "$0") help' for help."
	fi
	;;

verify)
	[[ $CURR_CONNECTION ]] || error "not connected."
	verify_connection
	;;

help | -h)
	echo "Usage: $(basename "$0") <cmd> <server>" >&2
	echo
	echo -e "  connect \t\t\t Connects to the default server."
	echo -e "  connect <server>\t\t Connects to a specified servers."
	echo -e "  disconnect\t\t\t Disconnects from the active server."
	echo -e "  kill-switch-{on|off}\t\t Changes the kill-switch value of specified server(s)."
	echo -e "  list\t\t\t\t List available servers."
	echo -e "  status\t\t\t Show current status of connection."
	echo -e "  update default\t\t Sets a new default server."
	echo -e "  update servers\t\t Updates the server list."
	echo -e "  verify\t\t\t Verify if you're connected to Mullvad."
	echo
	echo -e "  help\t\t\t\t Brings up this help menu."
	echo
	;;

*)
	error "unknown command, use '$(basename "$0") help' for help."
	;;
esac
